<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git init repository</title>
    <url>/2020/02/02/git-cmd/</url>
    <content><![CDATA[<h4 id="Git-global-setup"><a href="#Git-global-setup" class="headerlink" title="Git global setup"></a>Git global setup</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"&#123;user name&#125;"</span></span><br><span class="line">$ git config --global user.email <span class="string">"&#123;user email&#125;"</span></span><br></pre></td></tr></table></figure>
<h4 id="Create-a-new-repository"><a href="#Create-a-new-repository" class="headerlink" title="Create a new repository"></a>Create a new repository</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/&#123;user name&#125;/testinit.git</span><br><span class="line">$ <span class="built_in">cd</span> testinit</span><br><span class="line">$ touch README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">"add README"</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<h4 id="Push-an-existing-folder"><a href="#Push-an-existing-folder" class="headerlink" title="Push an existing folder"></a>Push an existing folder</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> existing_folder</span><br><span class="line">$ git init</span><br><span class="line">$ git remote add origin https://github.com/&#123;user name&#125;/testinit.git</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"Initial commit"</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<h4 id="Push-an-existing-Git-repository"><a href="#Push-an-existing-Git-repository" class="headerlink" title="Push an existing Git repository"></a>Push an existing Git repository</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> existing_repo</span><br><span class="line">$ git remote rename origin old-origin</span><br><span class="line">$ git remote add origin https://github.com/&#123;user name&#125;/testinit.git</span><br><span class="line">$ git push -u origin --all</span><br><span class="line">$ git push -u origin --tags</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>linux bash shell</title>
    <url>/2020/02/02/bash-shell/</url>
    <content><![CDATA[<p>shell普通变量：包含字母、数字和下划线;</p>
<h3 id="shell-特殊变量"><a href="#shell-特殊变量" class="headerlink" title="shell 特殊变量"></a>shell 特殊变量</h3><div class="table-container">
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>$0</td>
<td>当前脚本的文件名</td>
</tr>
<tr>
<td>$n</td>
<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是1，第二个参数是2</td>
</tr>
<tr>
<td>$#</td>
<td>传递给脚本或函数的参数个数</td>
</tr>
<tr>
<td>$*</td>
<td>传递给脚本或函数的所有参数</td>
</tr>
<tr>
<td>$@</td>
<td>传递给脚本或函数的所有参数; 被双引号(“ “)包含时，与 $* 稍有不同</td>
</tr>
<tr>
<td>$?</td>
<td>上个命令的退出状态，或函数的返回值</td>
</tr>
<tr>
<td>$$</td>
<td>当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID</td>
</tr>
</tbody>
</table>
</div>
<p>*和@的区别：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">∗和 @ 都表示传递给函数或脚本的所有参数，不被双引号(" ")包含时，都以"1""2" … "$n" 的形式输出所有参数。</span><br><span class="line">但是当它们被双引号(" ")包含时，"∗"会将所有的参数作为一个整体，以"1 2…n"的形式输出所有参数；"@"会将各个参数分开，以"1" "2"…"n" 的形式输出所有参数。</span><br></pre></td></tr></table></figure>
<h3 id="shell-if判断"><a href="#shell-if判断" class="headerlink" title="shell if判断"></a>shell if判断</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ -f "$file" ] then</span><br><span class="line">	echo "Ture"</span><br><span class="line">else</span><br><span class="line">	echo "False"</span><br></pre></td></tr></table></figure>
<p>-f file    : file是文件为True</p>
<p>-d file    : 是目录为True</p>
<p>-r file    : file可读为True</p>
<p>-s file    : file</p>
<p>-w file    : file可写为true</p>
<p>-x file    : file 可执行为true</p>
<p>-n $str1    :     $str1不是null 为True</p>
<p>-z $str1    :    $str1是null，为true</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>visual studio 常用快捷键</title>
    <url>/2020/02/02/visual-studio-key-map/</url>
    <content><![CDATA[<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># control + `	   			切换到终端</span><br><span class="line"># cmd + shift + k			删除一行</span><br><span class="line"># cmd + d							选择同一个文件中相同单词</span><br><span class="line"># shift + alt +↑\↓		复制一行文字到下一行/上一行</span><br><span class="line"># cmd + shift + enter	向上插入空行</span><br><span class="line"># cmd + enter					向下插入空行</span><br><span class="line"># cmd + delete 				删除光标左边的文字</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Python tricks</title>
    <url>/2020/01/26/python_tricks/</url>
    <content><![CDATA[<h3 id="Init-dict"><a href="#Init-dict" class="headerlink" title="Init dict"></a>Init dict</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = dict(([<span class="string">'name'</span>, <span class="string">'Tom'</span>], [<span class="string">'age'</span>, <span class="number">30</span>]))									<span class="comment">#out: &#123;'name': 'Tom', 'age': 30&#125;</span></span><br><span class="line">b = dict(zip([<span class="string">'name'</span>, <span class="string">'age'</span>], [<span class="string">'Tom'</span>, <span class="number">30</span>]))								<span class="comment">#out: &#123;'name': 'Tom', 'age': 30&#125;</span></span><br><span class="line">c = dict.fromkeys([<span class="string">'name'</span>, <span class="string">'age'</span>], <span class="number">0</span>)											<span class="comment">#out: &#123;'name': 0, 'age': 0&#125;</span></span><br><span class="line">d = &#123;k:<span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">'name'</span>, <span class="string">'age'</span>]&#125;												<span class="comment">#out: &#123;'name': 0, 'age': 0&#125;</span></span><br><span class="line">e = &#123;k:v <span class="keyword">for</span> (k,v) <span class="keyword">in</span> zip([<span class="string">'name'</span>, <span class="string">'age'</span>], [<span class="string">'Tom'</span>, <span class="number">30</span>])&#125;	<span class="comment">#out: &#123;'name': 'Tom', 'age': 30&#125;</span></span><br><span class="line">f = dict(name=<span class="string">'Tom'</span>, age=<span class="number">30</span>)															<span class="comment">#out: &#123;'name': 'Tom', 'age': 30&#125;</span></span><br><span class="line">g = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">30</span>&#125;														<span class="comment">#out: &#123;'name': 'Tom', 'age': 30&#125;</span></span><br><span class="line">h = &#123;&#125;</span><br><span class="line">h[<span class="string">'name'</span>] = <span class="string">'Tom'</span></span><br><span class="line">h[<span class="string">'age'</span>] = <span class="number">30</span>																							<span class="comment">#out: &#123;'name': 'Tom', 'age': 30&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo博客框架和GitHub Pages搭建静态网站</title>
    <url>/2020/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="新建Git项目"><a href="#新建Git项目" class="headerlink" title="新建Git项目"></a>新建Git项目</h2><p>GitHub Pages 允许每个账户创建一个名为 {username}.github.io 的仓库，会自动分配一个二级域名 github.io；<br>在 GitHub 新建一个仓库，名称为 {username}.github.io（以github.io 结尾）。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install Node.js</h3><p>下载<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Nodejs</a> ,稳定版，然后双击下载的文件，进行安装。<br>安装完毕后，在终端输入以下命令，检查是否安装成功：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">$ node -v</span><br></pre></td></tr></table></figure></p>
<h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><p>Hexo 一个博客框架，官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>使用Hexo创建一个项目，并在本地运行。</p>
<h3 id="Init-project"><a href="#Init-project" class="headerlink" title="Init project"></a>Init project</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &#123;name&#125;    <span class="comment"># name: 项目名</span></span><br></pre></td></tr></table></figure>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &#123;name&#125;</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &#123;name&#125;</span><br><span class="line">$ hexo generate     <span class="comment"># 编译生成 HTML 代码</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><p>部署到GitHub Pages上。</p>
<p>打开根目录下的 _config.yml 文件，找到 Deployment 部分；修改内容为：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:adonfu/adonfu.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>安装Git部署插件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>安装成功后，执行部署命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<p>部署成功后，访问 <a href="http://adonfu.github.io" target="_blank" rel="noopener">http://adonfu.github.io</a></p>
<h3 id="更新源码到-Git-可选"><a href="#更新源码到-Git-可选" class="headerlink" title="更新源码到 Git (可选)"></a>更新源码到 Git (可选)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git checkout -b <span class="built_in">source</span></span><br><span class="line">$ git add -A</span><br><span class="line">$ git commit -m <span class="string">"init blog"</span></span><br><span class="line">$ git remote add origin git@github.com:&#123;username&#125;/&#123;username&#125;.github.io.git</span><br><span class="line">$ git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure>
<h2 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>修改根目录下的 _config.yml 文件，定位 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Adon</span><br><span class="line">subtitle: '日积月累'</span><br><span class="line">description: '热爱技术、喜欢钻研'</span><br><span class="line">keywords: 'Python, C, Java, Go, Web应用开发，服务端研发'</span><br><span class="line">author: fuyd</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: ''</span><br></pre></td></tr></table></figure></p>
<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>目前 Hexo 里面应用最多的主题基本就是 Next 主题。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &#123;name&#125;   <span class="comment"># 进入到项目的根目录</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p>修改 _config.yml 文件，找到 theme 字段，修改为 next 即可<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p>
<h3 id="Next主题配置"><a href="#Next主题配置" class="headerlink" title="Next主题配置"></a>Next主题配置</h3><p>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下。</p>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line"># scheme: Gemini</span><br></pre></td></tr></table></figure>
<h4 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h4><p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标。<br>将图片转化为小图标 （<a href="https://realfavicongenerator.net" target="_blank" rel="noopener">https://realfavicongenerator.net</a> ），图标下载下来之后把它放在 themes/next/source/images 目录下面；<br>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon.png</span><br><span class="line">  safari_pinned_tab: /images/safari-pinned-tab.svg</span><br></pre></td></tr></table></figure></p>
<h4 id="avatar"><a href="#avatar" class="headerlink" title="avatar"></a>avatar</h4><p>avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像。<br>将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar2.png</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></figure></p>
<h4 id="rss"><a href="#rss" class="headerlink" title="rss"></a>rss</h4><p>博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><br>在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了</p>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><p>修改代码颜色，修改 _config.yml 文件的 codeblock 区块<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  # See: https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">  highlight_theme: night bright</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result.</span><br><span class="line">    show_result: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: flat</span><br></pre></td></tr></table></figure></p>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>浏览网页时快速返回到页面的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 _config.yml 的 back2top 字段即可<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure></p>
<h4 id="reading-progress"><a href="#reading-progress" class="headerlink" title="reading_progress"></a>reading_progress</h4><p>阅读进度<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Reading progress bar</span><br><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  position: top</span><br><span class="line">  color: "#222222"</span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure></p>
<h4 id="bookmark"><a href="#bookmark" class="headerlink" title="bookmark"></a>bookmark</h4><p>书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Bookmark Support</span><br><span class="line">bookmark:</span><br><span class="line">  enable: false</span><br><span class="line">  # Customize the color of the bookmark.</span><br><span class="line">  color: "#222"</span><br><span class="line">  # If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span><br><span class="line">  # If manual, only save it by clicking the bookmark-icon.</span><br><span class="line">  save: auto</span><br></pre></td></tr></table></figure></p>
<h4 id="github-banner"><a href="#github-banner" class="headerlink" title="github_banner"></a>github_banner</h4><p>在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># `Follow me on GitHub` banner in the top-right corner.</span><br><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https://github.com/adonfu/adonfu.github.io</span><br><span class="line">  title: Adon GitHub</span><br></pre></td></tr></table></figure></p>
<h4 id="gitalk"><a href="#gitalk" class="headerlink" title="gitalk"></a>gitalk</h4><p>由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。</p>
<p>Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。</p>
<p>首先需要在 GitHub 上面注册一个 OAuth Application，链接为：<a href="https://github.com/settings/applications/new，注册完毕之后拿到" target="_blank" rel="noopener">https://github.com/settings/applications/new，注册完毕之后拿到</a> Client ID、Client Secret 就可以了。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Multiple Comment System Support</span><br><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line">  active: gitalk</span><br></pre></td></tr></table></figure>
<p>然后找打 gitalk 配置，添加它的各项配置<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: adonfu</span><br><span class="line">  repo: adonfu.github.io</span><br><span class="line">  client_id: &#123;client_id&#125;</span><br><span class="line">  client_secret: &#123;client_secret&#125;</span><br><span class="line">  admin_user: adonfu # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk's display language depends on user's browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure></p>
<h4 id="pangu"><a href="#pangu" class="headerlink" title="pangu"></a>pangu</h4><p>中英文之间自动添加空格<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pangu: true</span><br></pre></td></tr></table></figure></p>
<h4 id="math"><a href="#math" class="headerlink" title="math"></a>math</h4><p>MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：<a href="https://theme-next.org/docs/third-party-services/math-equations。" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/math-equations。</a></p>
<p>mathjax 的使用需要额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm un hexo-renderer-marked --save</span><br><span class="line">$ npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>mathjax 配置如下：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Math Formulas Render Support</span><br><span class="line">math:</span><br><span class="line">  # Default (true) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in Front-matter.</span><br><span class="line">  # If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br><span class="line">  # hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # See: https://mhchem.github.io/MathJax-mhchem/</span><br><span class="line">    mhchem: true</span><br></pre></td></tr></table></figure></p>
<h4 id="pjax"><a href="#pjax" class="headerlink" title="pjax"></a>pjax</h4><p>pjax 利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pjax: true</span><br></pre></td></tr></table></figure><br>然后安装依赖库，切换到 next 主题下，然后安装依赖库<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pjax <span class="built_in">source</span>/lib/pjax</span><br></pre></td></tr></table></figure></p>
<p>Next主题设置完毕，更多主题参考：<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">https://theme-next.org/docs/</a></p>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>create a new post</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<p>创建的文章会出现在 source/_posts 文件夹下，是 MarkDown 格式,<br>在文章开头通过如下格式添加必要信息:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 标题 # 自动创建</span><br><span class="line">date: 日期 # 自动创建</span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>开头下方撰写正文，MarkDown 格式书写即可, 这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html。" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing.html。</a></p>
<h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p>增加标签可以手动添加，也可以通过命令添加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><br>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件</p>
<p>可以手动添加一个 type 字段来指定页面的类型</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">type: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>
<p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  #categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure></p>
<h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><br>然后同样地，会生成一个 source/categories/index.md 文件<br>添加一个 type 字段来指定页面的类型<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">type: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><br>在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure></p>
<h3 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h3><p>如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>然后在项目的 _config.yml 里面添加搜索设置如下<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><br>然后在主题的 _config.yml 里面修改如下<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 5</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure><br><a href="https://theme-next.org/docs/third-party-services/search-services" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/search-services</a></p>
<h3 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h3><p>另外还需要添加一个 404 页面，直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以如下<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">date: 2020-01-26 18:48:50</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">对不起，您所访问的页面不存在或者已删除。</span><br><span class="line">您可以&lt;a href="http://blog.smartfu.cn&gt;"&gt;点击此处&lt;/a&gt;返回首页。</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;blockquote class="blockquote-center"&gt;</span><br><span class="line">    Adon</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h3><p>脚本主要功能是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><br>在部署时，执行脚本即可：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh deploy.sh</span><br></pre></td></tr></table></figure></p>
<h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>申请域名, 比如smartfu.cn, 然后添加域名解析CNAME 域名解析（比如我使用阿里云域名解析）。</p>
<p>在 GitHub 的 Repository 里面设置域名，找到 Settings，下面有个 custom domain 的选项，输入自己的域名，比如我自己的域名:<br>blog.smartfu.cn</p>
<p>下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务, 直接勾选即可。</p>
<p>如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">blog.smartfu.cn</span><br></pre></td></tr></table></figure></p>
<p>这样避免了每次部署的时候自定义域名被清除的情况了。</p>
]]></content>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
</search>
